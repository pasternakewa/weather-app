{"version":3,"sources":["components/Icon.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","weatherIconId","alt","style","width","height","src","process","Input","value","onChange","onKeyPress","className","App","useState","loading","setLoading","error","setError","weatherData","setWeatherData","city","setCity","useEffect","navigator","geolocation","getCurrentPosition","coords","url","latitude","longitude","getQueryUrlByCurrentLocation","fetchWeatherData","weatherApiUrl","fetchUrl","getQueryUrl","fetch","then","response","json","fetchedWeatherData","cod","Error","message","name","catch","e","toString","target","charCode","onClick","fontWeight","sys","country","main","temp","weather","icon","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7011a1f5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Icon = ({ weatherIconId, alt }) => {\n  return (\n    <img\n      style={{ width: 100, height: 100 }}\n      src={`${process.env.REACT_APP_API_URL_ICON}${weatherIconId}@2x.png`}\n      alt={alt}\n    />\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\n\nconst Input = ({ value, onChange, onKeyPress }) => {\n  return (\n    <div>\n      <input className=\"form__input\" {...{ value, onChange, onKeyPress }} />\n    </div>\n  );\n};\n\nexport default Input;\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Icon from \"./components/Icon\";\nimport Input from \"./components/Input\";\n\nconst getQueryUrl = (city) =>\n  `${process.env.REACT_APP_API_URL}?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\n\nconst getQueryUrlByCurrentLocation = ({ latitude, longitude }) =>\n  `${process.env.REACT_APP_API_URL}?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}`;\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [weatherData, setWeatherData] = useState();\n  const [city, setCity] = useState(\"\");\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude, longitude } }) => {\n        const location = { latitude, longitude };\n        const url = getQueryUrlByCurrentLocation(location);\n        fetchWeatherData(url);\n      },\n      setLoading(false)\n    );\n  }, []);\n\n  const fetchWeatherData = (weatherApiUrl) => {\n    setLoading(true);\n    const fetchUrl = weatherApiUrl ? weatherApiUrl : getQueryUrl(city);\n    fetch(fetchUrl)\n      .then((response) => response.json())\n      .then((fetchedWeatherData) => {\n        if (fetchedWeatherData.cod !== 200) {\n          throw new Error(fetchedWeatherData.message);\n        }\n        setWeatherData(fetchedWeatherData);\n        setError();\n        setCity(fetchedWeatherData.name);\n        setLoading(false);\n      })\n      .catch((e) => {\n        setLoading(false);\n        setError(e.toString());\n        setWeatherData();\n      });\n  };\n\n  const handleKeypress = (e) => {\n    if (e.charCode === 13) {\n      fetchWeatherData();\n    }\n  };\n\n  const handleInputChange = ({ target }) => [setCity(target.value)];\n\n  return (\n    <div className=\"App\">\n      <div className=\"background__shape\"></div>\n      <div className=\"weather-container\">\n        <Input\n          value={city}\n          onChange={handleInputChange}\n          onKeyPress={handleKeypress}\n        />\n        <button className=\"form__button\" onClick={() => fetchWeatherData()}>\n          Submit\n        </button>\n        {weatherData && (\n          <>\n            <p style={{ fontWeight: \"bold\" }}>\n              {weatherData.name}, {weatherData.sys?.country}\n            </p>\n            <p>{weatherData.main?.temp}&#8451;</p>\n            <Icon\n              weatherIconId={weatherData.weather?.[0]?.icon}\n              alt={weatherData.weather?.[0]?.description}\n            />\n            <p>{weatherData.weather?.[0]?.description}</p>\n          </>\n        )}\n        {error && (\n          <>\n            <p>{error}.</p>\n            <p>Please enter a valid city and try again.</p>\n          </>\n        )}\n        {!error && (loading || !weatherData) && (\n          <>\n            <Icon weatherIconId=\"50d\" alt=\"Fog\" />\n            <p>I'm a little foggy...</p>\n            <p>Please enter a city or allow access to location.</p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}